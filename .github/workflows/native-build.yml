name: Native build
on:
  create: # when tags are created
  workflow_dispatch: # clickable button in CI manager
env:
  OUT_DIR: artifacts/natives

jobs:
  native_builds:
    runs-on: ${{ matrix.os }}
    name: ${{ matrix.build_target }} build
    
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: windows-latest
            build_target: win-x64
            args_spirv_cross: win-x64 --artifact-name build/SPIRV-Cross/Release/spirv-cross-c-shared.dll 
            args_shaderc:     win-x64 --artifact-name build/shaderc/libshaderc/Release/shaderc_shared.dll
            cmake_args_spirv_cross: $CMAKE_ARGS_1
            cmake_args_shaderc:     $CMAKE_ARGS_2
            
          - os: windows-latest
            build_target: win-x86
            args_spirv_cross: win-x86 --artifact-name build/SPIRV-Cross/Release/spirv-cross-c-shared.dll 
            args_shaderc:     win-x86 --artifact-name build/shaderc/libshaderc/Release/shaderc_shared.dll
            cmake_args_spirv_cross: $CMAKE_ARGS_1
            cmake_args_shaderc:     $CMAKE_ARGS_2
            
          - os: windows-latest
            build_target: win-arm64
            args_spirv_cross: win-arm64 --artifact-name build/SPIRV-Cross/Release/spirv-cross-c-shared.dll 
            args_shaderc:     win-arm64 --artifact-name build/shaderc/libshaderc/Release/shaderc_shared.dll
            cmake_args_spirv_cross: $CMAKE_ARGS_1
            cmake_args_shaderc:     $CMAKE_ARGS_2
            
          - os: windows-latest
            build_target: android-arm64-v8a
            args_spirv_cross: --android-abi arm64-v8a --artifact-name build/SPIRV-Cross/libspirv-cross-c-shared.so  --android-ndk '%ANDROID_NDK_HOME%' 
            args_shaderc:     --android-abi arm64-v8a --artifact-name build/shaderc/libshaderc/libshaderc_shared.so --android-ndk '%ANDROID_NDK_HOME%' 
            cmake_args_spirv_cross: $CMAKE_ARGS_1
            cmake_args_shaderc:     $CMAKE_ARGS_2
            
          - os: windows-latest 
            build_target: android-armeabi-v7a
            args_spirv_cross: --android-abi armeabi-v7a --artifact-name build/SPIRV-Cross/libspirv-cross-c-shared.so  --android-ndk '%ANDROID_NDK_HOME%' 
            args_shaderc:     --android-abi armeabi-v7a --artifact-name build/shaderc/libshaderc/libshaderc_shared.so --android-ndk '%ANDROID_NDK_HOME%'
            cmake_args_spirv_cross: $CMAKE_ARGS_1
            cmake_args_shaderc:     $CMAKE_ARGS_2
            
          - os: windows-latest
            build_target: android-x86_64
            args_spirv_cross: --android-abi x86_64 --artifact-name build/SPIRV-Cross/libspirv-cross-c-shared.so  --android-ndk '%ANDROID_NDK_HOME%' 
            args_shaderc:     --android-abi x86_64 --artifact-name build/shaderc/libshaderc/libshaderc_shared.so --android-ndk '%ANDROID_NDK_HOME%' 
            cmake_args_spirv_cross: $CMAKE_ARGS_1
            cmake_args_shaderc:     $CMAKE_ARGS_2
            
          - os: ubuntu-latest
            build_target: linux-x64
            args_spirv_cross: --artifact-name build/SPIRV-Cross/libspirv-cross-c-shared.so 
            args_shaderc:     --artifact-name build/shaderc/libshaderc/libshaderc_shared.so
            cmake_args_spirv_cross: $CMAKE_ARGS_1
            cmake_args_shaderc:     $CMAKE_ARGS_2
            
          - os: macos-latest
            build_target: osx-x64
            args_spirv_cross: --artifact-name build/SPIRV-Cross/libspirv-cross-c-shared.dylib 
            args_shaderc:     --artifact-name build/shaderc/libshaderc/libshaderc_shared.dylib
            cmake_args_spirv_cross: $CMAKE_ARGS_1
            cmake_args_shaderc:     $CMAKE_ARGS_2

          - os: macos-latest
            build_target: osx-arm64
            args_spirv_cross: --artifact-name build/SPIRV-Cross/libspirv-cross-c-shared.dylib 
            args_shaderc:     --artifact-name build/shaderc/libshaderc/libshaderc_shared.dylib
            cmake_args_spirv_cross: $CMAKE_ARGS_1
            cmake_args_shaderc:     $CMAKE_ARGS_2
            
          - os: macos-latest
            build_target: ios-arm64
            args_spirv_cross: ios --platform OS64 --artifact-name build/SPIRV-Cross/Release-iphoneos/libspirv-cross_combined.a    --combined-static build/SPIRV-Cross/Release-iphoneos
            args_shaderc:     ios --platform OS64 --artifact-name build/shaderc/libshaderc/Release-iphoneos/libshaderc_combined.a
            cmake_args_spirv_cross: -DSPIRV_CROSS_STATIC=ON -DSPIRV_CROSS_SHARED=OFF -DSPIRV_CROSS_CLI=OFF
            cmake_args_shaderc:     -DCMAKE_POLICY_DEFAULT_CMP0006=OLD -DCMAKE_POLICY_DEFAULT_CMP0077=NEW -DENABLE_HLSL=ON -DENABLE_OPT=ON -DENABLE_GLSLANG_BINARIES=OFF -DSPIRV_SKIP_EXECUTABLES=ON -DSHADERC_SKIP_TESTS=ON -DSHADERC_SKIP_EXAMPLES=ON -DSHADERC_SKIP_INSTALL=ON
            
          - os: macos-latest
            build_target: iossimulator-arm64
            args_spirv_cross: ios --platform SIMULATOR64 --artifact-name build/SPIRV-Cross/Release-iphonesimulator/libspirv-cross_combined.a    --combined-static build/SPIRV-Cross/Release-iphonesimulator
            args_shaderc:     ios --platform SIMULATOR64 --artifact-name build/shaderc/libshaderc/Release-iphonesimulator/libshaderc_combined.a
            cmake_args_spirv_cross: -DSPIRV_CROSS_STATIC=ON -DSPIRV_CROSS_SHARED=OFF -DSPIRV_CROSS_CLI=OFF
            cmake_args_shaderc:     -DCMAKE_POLICY_DEFAULT_CMP0006=OLD -DCMAKE_POLICY_DEFAULT_CMP0077=NEW -DENABLE_HLSL=ON -DENABLE_OPT=ON -DENABLE_GLSLANG_BINARIES=OFF -DSPIRV_SKIP_EXECUTABLES=ON -DSHADERC_SKIP_TESTS=ON -DSHADERC_SKIP_EXAMPLES=ON -DSHADERC_SKIP_INSTALL=ON

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
          
      - name: Cache native libraries
        uses: actions/cache@v3
        id: cache-native-libraries
        with:
          path: ${{ env.OUT_DIR }}/
          key: |
            ${{ matrix.build_target }}-${{ hashFiles('.git/modules/submodules/*/refs/heads/*') }}
          restore-keys: |
            ${{ matrix.build_target }}-${{ hashFiles('.git/modules/submodules/*/refs/heads/*') }}
        
      - name: Sync Third Party
        if: steps.cache-native-libraries.outputs.cache-hit != 'true'
        working-directory: submodules/shaderc
        run: ./utils/git-sync-deps
        shell: bash
        
      - name: Build native libraries
        if: steps.cache-native-libraries.outputs.cache-hit != 'true'
        env:
          MODULE_ARGS_1: --submodule SPIRV-Cross --build-type Release
          MODULE_ARGS_2: --submodule shaderc     --build-type Release
          CMAKE_ARGS_1: -DSPIRV_CROSS_STATIC=OFF -DSPIRV_CROSS_SHARED=ON -DSPIRV_CROSS_CLI=OFF
          CMAKE_ARGS_2: -DENABLE_HLSL=ON -DENABLE_OPT=ON -DENABLE_GLSLANG_BINARIES=OFF -DSPIRV_SKIP_EXECUTABLES=ON -DSHADERC_SKIP_TESTS=ON -DSHADERC_SKIP_EXAMPLES=ON -DSHADERC_SKIP_INSTALL=ON
          
        run:  |
              mkdir -p $OUT_DIR
              if [ "$RUNNER_OS" == "Windows" ]; then
                ./build-native.cmd ${{ matrix.args_spirv_cross }} $MODULE_ARGS_1 --out-dir $OUT_DIR --cmake-args "${{ matrix.cmake_args_spirv_cross }}"
                ./build-native.cmd ${{ matrix.args_shaderc }}     $MODULE_ARGS_2 --out-dir $OUT_DIR --cmake-args "${{ matrix.cmake_args_shaderc }}"
              else
                ./build-native.sh  ${{ matrix.args_spirv_cross }} $MODULE_ARGS_1 --out-dir $OUT_DIR --cmake-args "${{ matrix.cmake_args_spirv_cross }}"
                ./build-native.sh  ${{ matrix.args_shaderc }}     $MODULE_ARGS_2 --out-dir $OUT_DIR --cmake-args "${{ matrix.cmake_args_shaderc }}"
              fi
        shell: bash
        
      - name: List $RUNNER_WORKSPACE
        if: ${{ vars.ACTIONS_STEP_DEBUG }}
        run: find $RUNNER_WORKSPACE
        shell: bash

      - name: Upload native library artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.build_target }}
          path: ${{ env.OUT_DIR }}/
          if-no-files-found: error


  managed_build:
    runs-on: windows-latest
    needs: native_builds

    steps:
      - uses: actions/checkout@v4
      
      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          path: ${{ env.OUT_DIR }}/
          
      - name: List $RUNNER_WORKSPACE
        if: ${{ vars.ACTIONS_STEP_DEBUG }}
        run: find $RUNNER_WORKSPACE
        shell: bash
        
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'
      
      - name: Restore
        run: dotnet restore
        
      - name: Build
        run: dotnet build -c Release --no-restore 
        
      - name: Test
        run: dotnet test -c Release --no-restore --no-build
       
      - name: Pack
        run: dotnet pack -c Release --no-restore --verbosity normal

      - name: Upload NuGet artifact
        uses: actions/upload-artifact@v3
        with:
          name: nuget_package
          path: artifacts/pkg/Release/*.nupkg
          if-no-files-found: error

      - name: NuGet Push 
        if: startsWith(github.ref, 'refs/tags/')
        working-directory: artifacts/pkg/Release
        run: dotnet nuget push "*.nupkg" --source https://api.nuget.org/v3/index.json --api-key ${{ secrets.NUGET_TOKEN }} --skip-duplicate

